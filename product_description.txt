Red Hat Advanced Cluster Management (RHACM) for Kubernetes is a management and control plane designed for running fleets of OpenShift and other Kubernetes clusters. Its core functionalities include **multi-cluster lifecycle management**, **application deployment**, **policy enforcement**, and **unified observability**.

The **observability service** within RHACM is a critical component that provides insight into the **health and utilization of clusters and workloads across your entire fleet**. It automates and manages its own underlying components, offering a **single pane of glass for monitoring** the container platform estate.

Key open-source tools and components leveraged by the observability service include:

*   **Prometheus**: A monitoring and alerting tool used to collect metrics as time-series data from your applications. It stores scraped samples locally, aggregates data, and generates alerts.
*   **Thanos**: A toolkit of components designed for **global querying across multiple Prometheus instances**. It is deployed within the hub cluster for **long-term metrics storage**, primarily using **S3 compatible object storage**. Thanos also handles compaction of data to ensure query performance.
*   **Grafana**: An instance of Grafana is deployed by the observability component to enable **data visualization through dashboards and data exploration**. RHACM supports Grafana version 11.1.5. You can also **design custom Grafana dashboards**.
*   **Alertmanager**: A tool to manage and receive alerts from Prometheus. It can **deduplicate, group, and route alerts** to various integrations like email, Slack, and PagerDuty. Alertmanager can also be configured to **silence and inhibit specific alerts**. RHACM supports Prometheus Alertmanager version 0.27.
*   **Observability-endpoint-operator**: Automatically deployed to each managed cluster, this controller starts a metrics collector that gathers data from Red Hat OpenShift Container Platform Prometheus and sends it to the RHACM hub cluster.
*   **Multicluster-observability-operator**: Enabled by default by the `multiclusterhub-operator`, this pod is responsible for deploying and managing core observability components like the Thanos Compactor.

**Key Observability Concepts and Operations:**

*   **Persistent Storage**: The observability service requires persistent volumes (PVs) for components like `alertmanager`, `thanos-compactor`, `thanos-rule`, `thanos-receive-default`, and `thanos-store-shard`. It is crucial to **avoid local storage operator or local volumes** for PVs to prevent data loss. **Object storage is the primary storage for metrics and metadata via Thanos**. Supported cloud providers for object storage include AWS S3, Red Hat Ceph, Google Cloud Storage, Azure storage, Red Hat OpenShift Data Foundation, and Red Hat OpenShift on IBM (ROKS).
*   **Enabling Observability**: This can be done via the command line interface (CLI) by creating a `MultiClusterObservability` custom resource instance, or through the Red Hat OpenShift Container Platform console. Prerequisites include installing RHACM, defining a storage class, direct network access to the hub cluster, and configuring an object store.
*   **Metrics**: The system collects default metrics (e.g., `acm_managed_cluster_info`, `policyreport_info`, `search_api` metrics). You can also **add custom Platform metrics** by creating a ConfigMap on the hub cluster, or **User workload metrics** on the managed cluster. Metrics for the hub cluster appear in the `local-cluster` namespace if hub self-management is enabled.
*   **Alert Management**: Alerts from managed clusters are automatically forwarded to the RHACM hub cluster's Alertmanager. You can **configure Alertmanager** to integrate with external messaging tools, mount secrets, and manage alert forwarding. Alerts can be **silenced** by name, match label, or time duration, and **suppressed** using inhibition rules based on severity.
*   **Using Observability**: This involves querying metrics using the Observability API, exporting metrics to external endpoints, and viewing data through various Grafana dashboards such as **Alert Analysis**, **Clusters by Alert**, **Alerts by Cluster**, **etcd table**, **Kubernetes API server dashboard**, and **OpenShift Virtualization dashboard**. You can also use **managed cluster labels in Grafana for filtering**.
*   **Advanced Configuration**: Beyond basic setup, RHACM Observability allows for **adding custom metrics** (Platform or User workload), **configuring proxy settings** for add-ons, **customizing route certificates** for secure connections to the object store, **creating custom Prometheus recording and alerting rules**, **updating `MultiClusterObservability` custom resource replicas**, and **increasing/decreasing persistent volumes**.
*   **RBAC**: Fine-grain role-based access control (RBAC) is available (Technology Preview) to restrict metric access to specific namespaces for different user groups within the cluster.
*   **Red Hat Insights Integration**: RHACM Observability integrates with Red Hat Insights to help identify existing or potential problems in clusters, providing insights into stability, performance, network, and security risks. This includes **managing insight PolicyReports** (violations generated by `insights-client`) and **viewing update risk predictions** for managed clusters.